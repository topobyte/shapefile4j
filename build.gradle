wrapper {
    gradleVersion = '5.2.1'
}

buildscript {
    repositories {
        maven { url 'http://mvn.topobyte.de' }
    }
    dependencies {
        classpath 'de.topobyte:gradle-launch-and-install-plugin:0.0.3'
    }
}

allprojects {
    group = pGroup
    version = pVersion
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'eclipse'

    repositories {
        maven {
            url 'https://mvn.topobyte.de'
        }
        mavenCentral()
    }
}

project(':shapefile4j') {
    dependencies {
        compile 'de.topobyte:dbf4j:0.1.0'
        compile 'org.locationtech.jts:jts-core:1.16.1'
        compile 'commons-codec:commons-codec:1.10'
        compile 'org.slf4j:slf4j-api:1.6.1'
    }

    if (project.hasProperty("topobyte")) {
        apply from: 'file:///' + System.getProperty("user.home") \
            + '/.gradle/topobyte.gradle'
    }

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
        archives sourcesJar
    }
}

project(':shapefile4j-util') {
    apply plugin: 'application'
    apply plugin: 'de.topobyte.launch-and-install-gradle-plugin'

    startScripts.enabled = false

    launchAndInstall {
        installationPath = 'topobyte/shapefile4j'
        makeselfLabel = 'Shapefile4j'
        createScript(project, 'de.topobyte.esri.shapefile.executables.DumpData', 'ShapefileDumpData')
        createScript(project, 'de.topobyte.esri.shapefile.executables.ShowFields', 'ShapefileShowFields')
        createScript(project, 'de.topobyte.esri.shapefile.executables.ToSmxCollection', 'ShapefileToSmxCollection')
    }

    dependencies {
        compile project(':shapefile4j')
        compile 'de.topobyte:simple-mapfile-xml:0.1.0'
        compile 'de.topobyte:commons-cli-helper:0.1.0'

        runtime 'org.slf4j:slf4j-log4j12:1.6.1'
        runtime 'log4j:log4j:1.2.16'
    }
    task copyJars(type: Copy) {
        into "$buildDir/lib-run"
        from jar
    }

    task copyDeps(type: Copy) {
        into "$buildDir/lib-run"
        from configurations.runtime
    }

    task createRuntime(dependsOn: [copyJars, copyDeps]) {
        description 'Setup the execution environment for the main scripts'
    }
}
